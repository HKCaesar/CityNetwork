
// variables
val weightDensity = Val[Double]
val weightCenter = Val[Double]
val weightRoad = Val[Double]
val centerNumber = Val[Int]

// indicators
val networkSpeed = Val[Double]
val localDensity = Val[Double]
val globalDensity = Val[Double]
val moran = Val[Double]

// local vars correlations
//  local vars : density ; centre-distance ; road-distance ; centre-eucl-distance
val rhoDensCentre = Val[Array[Double]]
val rhoDensRoad = Val[Array[Double]]
val rhoDensCentrEucl = Val[Array[Double]]
val rhoCentrRoad = Val[Array[Double]]
val rhoCentrCentrEucl = Val[Array[Double]]
val rhoRoadCentrEucl = Val[Array[Double]]


val id = Val[Int]
val replication = Val[Int]

// setup-headless [weight-density weight-center weight-road #-centres sd]
// indicators : [ eval-speed , eval-density , spatial-autocorrelation-index , global-density]
val cmds = Seq("setup-headless ${weightDensity} ${weightCenter} ${weightRoad} ${centerNumber} ${replication}","run-experiment")

val model =
NetLogo5Task.workspace(workDirectory,"HEADLESS_base.nlogo",cmds) set(
    inputs += (weightDensity,weightCenter,weightRoad,centerNumber,replication,id),
    outputs += (weightDensity,weightCenter,weightRoad,centerNumber,replication,id),
    netLogoOutputs += ("eval-speed", networkSpeed),
    netLogoOutputs += ("eval-density", localDensity),
    netLogoOutputs += ("global-density", globalDensity),
    netLogoOutputs += ("spatial-autocorrelation-index", moran),
    netLogoOutputs += ("lagged-corrs \"density\" \"centre-distance\" 15 5",rhoDensCentre),
    netLogoOutputs += ("lagged-corrs \"density\" \"road-distance\" 15 5",rhoDensRoad),
    netLogoOutputs += ("lagged-corrs \"density\" \"centre-eucl-distance\" 15 5",rhoDensCentrEucl),
    netLogoOutputs += ("lagged-corrs \"centre-distance\" \"road-distance\" 15 5",rhoCentrRoad),
    netLogoOutputs += ("lagged-corrs \"centre-distance\" \"centre-eucl-distance\" 15 5",rhoCentrCentrEucl),
    netLogoOutputs += ("lagged-corrs \"road-distance\" \"centre-eucl-distance\" 15 5",rhoRoadCentrEucl)
)
