
;;;;;;;
;; Synthetic euclidian nw generation, given cities distribtuion
;;
;; @requires :: cities/nw breeds
;;;;;;;




to generate-synthetic-euclidian-network
  
  ; external call to a city spatial distribution generation
  generate-cities cities-generation-method
  
  ; generic generate network function
  generate-network network-generation-method
  
end


;;
;  Network generation
;  
;  @param generation-method : String
;
to generate-network [generation-method]
  
  if generation-method = "random"[
    random-network
    planarize-network cities roads
  ]
  
  
  ;; TODO : locally random ; proba = f(distance) ? === gravity approach.
  ; neigborhood size determines size of local clusters ?
  
  if generation-method = "gravity"[
    
  ]
  
  if generation-method = "simple-connexification"[
    simple-connexification
  ]
  
  
  if generation-method = "neighborhood-gravity"[
    ; first do a simple connexification
    simple-connexification
    ; then locally add links
    
    
  ]
  
  
  
end


to random-network
  let #-link floor (random-network-density * #-cities * (#-cities - 1) / 2)
  repeat #-link [
    ask one-of cities [
      create-road-with one-of (other cities) with [not road-neighbor? myself]
    ]
  ]
end


to simple-connexification
  ; we need to trick here the connexify network function, as its generic implementation fails with empty edgeset
    ; -> connects the closest cities, what the algo should do in first step  - not exactly, depends on connex comps order (not deterministic ?)
    
    ; totally dirty : O(n^2)
    ask one-of cities with-min [min map [distance ?] to-list (other cities)] [create-road-with one-of ((other cities) with-min [distance myself])]
    
    connexify-network cities roads
end




to new-road
  set capacity 1
  set thickness capacity
  set color red
end

to new-nw-node
  set shape "circle"
  set size 0.2
  set color red
end