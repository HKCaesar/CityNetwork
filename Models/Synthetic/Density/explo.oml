import java.io._
import sys.process._
import java.util.Date

// Parameters
val diffusion = Val[Double]
val diffusionsteps = Val[Double]
val alphalocalization = Val[Double]
val growthrate = Val[Double]
val replication = Val[Int]

// exploration task
val exploration =
  ExplorationTask(
        (diffusion in (0.0 to 0.1 by 0.01)) x
        (diffusionsteps in (1.0 to 7.0 by 3.0)) x
        (alphalocalization in (0.5 to 1.5 by 0.1)) x
        (growthrate in (100.0 to 500.0 by 200.0)) x
        (replication in (UniformDistribution[Int]() take 100))
  )


//-------------------------------------------------------
// FOR TEST
/* val exploration =  ExplorationTask(
  (diffusion in (0.1 to 0.1 by 1)) x
    (diffusionsteps in (1.0 to 1.0 by 1)) x
    (alphalocalization in (0.5 to 0.5 by 1)) x
    (growthrate in (100.0 to 100.0 by 1)) x
      (replication in (UniformDistribution[Int]() take 16))
  )*/
//--------------------------------------------------------


// reporters
//moran-index" "average-distance-individuals" "entropy" "rank-size-slope
val moran=Val[Double]
val distance=Val[Double]
val entropy=Val[Double]
val slope=Val[Double]

//NetLogo go for one time step
val cmds = List(
  "setup-openmole-experiment ${diffusion} ${diffusionsteps} ${alphalocalization} ${growthrate}",
  "go-openmole-experiment")

// run RServe
// -> do it before, many instance if not.
//"R -e library(Rserve);Rserve()" !

// system adjustement for gis lib in netlogo
System.setProperty("com.sun.media.jai.disableMediaLib", "true")

val scriptPath = System.getenv("CN_HOME")+"/Models/Synthetic/Density/HEADLESS_Density-system.nlogo"

val model = NetLogo5Task(scriptPath,cmds,true) set (
  netLogoOutputs += ("moran-index", moran),
  netLogoOutputs += ("average-distance-individuals", distance),
  netLogoOutputs += ("entropy", entropy),
  netLogoOutputs += ("rank-size-slope",slope),
  netLogoOutputs += ("sp-diffusion",diffusion),
  netLogoOutputs += ("sp-diffusion-steps",diffusionsteps),
  netLogoOutputs += ("sp-alpha-localization",alphalocalization),
  netLogoOutputs += ("sp-growth-rate",growthrate)
  )

// output
//val h = ToStringHook()
val h = AppendToCSVFileHook("res_oml/"+(new java.util.Date()).toString().replace(" ","_")+".csv")



val startTime = System.currentTimeMillis

// environement
val env = LocalEnvironment(4)

logger.level("FINE")

val exec = exploration -< (model on env hook h) start

exec.waitUntilEnded

println("Ellapsed Time is "+(System.currentTimeMillis - startTime) / 1000.0)
