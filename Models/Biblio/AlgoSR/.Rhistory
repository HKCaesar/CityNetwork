p=ggplot(data.frame(x=param[rows,x_param],y=mean[rows,indicator],euclpace=param[rows,varying_param],
ymin=mean[rows,indicator]-sd[rows,indicator],ymax=mean[rows,indicator]+sd[rows,indicator]),
aes(x=x,y=y,colour=euclpace))
p+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax),width=0.05)+xlab(xlab)+ylab(ylab)+xlim(xlim)
}
indics=c("accessibility","entropy","stability","travel-distance")
plotlist=list();
for(i in 1:length(indics)){
plotlist[[i]]=plotWithBars(
param,mean,sd,
fixed_par_cols=c(2),fixed_par_vals=c(0.075),
indicator=i,x_param=3,varying_param=1,
xlab="reg_decision_proba",ylab=indics[i],xlim=c(0.25,1.25)
)
}
multiplot(plotlist=plotlist,cols=2)
indics=c("accessibility","entropy","stability","travel-distance")
plotlist=list();
for(i in 1:length(indics)){
plotlist[[i]]=plotWithBars(
param,mean,sd,
fixed_par_cols=c(2),fixed_par_vals=c(0.075),
indicator=i,x_param=1,varying_param=3,
xlab="euclidian_pace",ylab=indics[i],xlim=c(0.25,1.25)
)
}
multiplot(plotlist=plotlist,cols=2)
indics=c("accessibility","entropy","stability","travel-distance")
plotlist=list();
for(i in 1:length(indics)){
plotlist[[i]]=plotWithBars(
param,mean,sd,
fixed_par_cols=c(2),fixed_par_vals=c(0.075),
indicator=i,x_param=1,varying_param=3,
xlab="euclidian_pace",ylab=indics[i],xlim=c(0.25,1.25)
)
}
multiplot(plotlist=plotlist,cols=2)
plotWithBars<-function(param,mean,sd,fixed_par_cols,fixed_par_vals,indicator,x_param,varying_param,xlab="",ylab="",xlim=c(0,1)){
# get concerned rows
rows=rep(TRUE,nrow(param))
for(k in 1:length(fixed_par_cols)){rows=rows&(abs(param[,fixed_par_cols[k]]-fixed_par_vals[k])<0.0000001); }
p=ggplot(data.frame(x=param[rows,x_param],y=mean[rows,indicator],regdecision=param[rows,varying_param],
ymin=mean[rows,indicator]-sd[rows,indicator],ymax=mean[rows,indicator]+sd[rows,indicator]),
aes(x=x,y=y,colour=regdecision))
p+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax),width=0.05)+xlab(xlab)+ylab(ylab)+xlim(xlim)
}
indics=c("accessibility","entropy","stability","travel-distance")
plotlist=list();
for(i in 1:length(indics)){
plotlist[[i]]=plotWithBars(
param,mean,sd,
fixed_par_cols=c(2),fixed_par_vals=c(0.075),
indicator=i,x_param=1,varying_param=3,
xlab="euclidian_pace",ylab=indics[i]#,xlim=c(0.25,1.25)
)
}
multiplot(plotlist=plotlist,cols=2)
plotWithBars<-function(param,mean,sd,fixed_par_cols,fixed_par_vals,indicator,x_param,varying_param,xlab="",ylab="",xlim=c(0,1)){
# get concerned rows
rows=rep(TRUE,nrow(param))
for(k in 1:length(fixed_par_cols)){rows=rows&(abs(param[,fixed_par_cols[k]]-fixed_par_vals[k])<0.0000001); }
p=ggplot(data.frame(x=param[rows,x_param],y=mean[rows,indicator],regdecision=param[rows,varying_param],
ymin=mean[rows,indicator]-sd[rows,indicator],ymax=mean[rows,indicator]+sd[rows,indicator]),
aes(x=x,y=y,colour=regdecision))
p+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax),width=0.05)+xlab(xlab)+ylab(ylab)
#+xlim(xlim)
}
indics=c("accessibility","entropy","stability","travel-distance")
plotlist=list();
for(i in 1:length(indics)){
plotlist[[i]]=plotWithBars(
param,mean,sd,
fixed_par_cols=c(2),fixed_par_vals=c(0.075),
indicator=i,x_param=1,varying_param=3,
xlab="euclidian_pace",ylab=indics[i]#,xlim=c(0.25,1.25)
)
}
multiplot(plotlist=plotlist,cols=2)
param
indics=c("accessibility","entropy","stability","travel-distance")
plotlist=list();
for(i in 1:length(indics)){
plotlist[[i]]=plotWithBars(
param,mean,sd,
fixed_par_cols=c(1),fixed_par_vals=c(1.5),
indicator=i,x_param=2,varying_param=3,
xlab="lambda_acc",ylab=indics[i]#,xlim=c(0.25,1.25)
)
}
multiplot(plotlist=plotlist,cols=2)
plotWithBars<-function(param,mean,sd,fixed_par_cols,fixed_par_vals,indicator,x_param,varying_param,xlab="",ylab="",xlim=c(0,1)){
# get concerned rows
rows=rep(TRUE,nrow(param))
for(k in 1:length(fixed_par_cols)){rows=rows&(abs(param[,fixed_par_cols[k]]-fixed_par_vals[k])<0.0000001); }
p=ggplot(data.frame(x=param[rows,x_param],y=mean[rows,indicator],regdecision=param[rows,varying_param],
ymin=mean[rows,indicator]-sd[rows,indicator],ymax=mean[rows,indicator]+sd[rows,indicator]),
aes(x=x,y=y,colour=regdecision))
p+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax),width=0.05)+xlab(xlab)+ylab(ylab)
#+xlim(xlim)
}
indics=c("accessibility","entropy","stability","travel-distance")
plotlist=list();
for(i in 1:length(indics)){
plotlist[[i]]=plotWithBars(
param,mean,sd,
fixed_par_cols=c(1),fixed_par_vals=c(1.5),
indicator=i,x_param=2,varying_param=3,
xlab="lambda_acc",ylab=indics[i]#,xlim=c(0.25,1.25)
)
}
multiplot(plotlist=plotlist,cols=2)
plotWithBars<-function(param,mean,sd,fixed_par_cols,fixed_par_vals,indicator,x_param,varying_param,xlab="",ylab="",xlim=c(0,1)){
# get concerned rows
rows=rep(TRUE,nrow(param))
for(k in 1:length(fixed_par_cols)){rows=rows&(abs(param[,fixed_par_cols[k]]-fixed_par_vals[k])<0.0000001); }
p=ggplot(data.frame(x=param[rows,x_param],y=mean[rows,indicator],regdecision=param[rows,varying_param],
ymin=mean[rows,indicator]-sd[rows,indicator],ymax=mean[rows,indicator]+sd[rows,indicator]),
aes(x=x,y=y,colour=regdecision))
p+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax),width=0.005)+xlab(xlab)+ylab(ylab)
#+xlim(xlim)
}
indics=c("accessibility","entropy","stability","travel-distance")
plotlist=list();
for(i in 1:length(indics)){
plotlist[[i]]=plotWithBars(
param,mean,sd,
fixed_par_cols=c(1),fixed_par_vals=c(1.5),
indicator=i,x_param=2,varying_param=3,
xlab="lambda_acc",ylab=indics[i]#,xlim=c(0.25,1.25)
)
}
multiplot(plotlist=plotlist,cols=2)
param
indics=c("accessibility","entropy","stability","travel-distance")
plotlist=list();
for(i in 1:length(indics)){
plotlist[[i]]=plotWithBars(
param,mean,sd,
fixed_par_cols=c(1),fixed_par_vals=c(2.5),
indicator=i,x_param=2,varying_param=3,
xlab="lambda_acc",ylab=indics[i]#,xlim=c(0.25,1.25)
)
}
multiplot(plotlist=plotlist,cols=2)
library(rgdal)
help(rdgal)
library(mapTools)
help(writeOGR)
Ã©^10
2^10
2^20
2^15
2^20
544092/4
60*6000
x=c(7921,5184,8836,4761)
(x[4]-mean(x)/(max(x)-min(x))
)
(x[4]-mean(x))/(max(x)-min(x))
library(RColorBrewer)
library(ggplot2)
library(MASS)
source(paste0(Sys.getenv('CN_HOME'),'/Models/Utils/R/plots.R'))
real_raw = read.csv(
#paste0(Sys.getenv("CN_HOME"),'/Results/Synthetic/Density/RealData/Numeric/france_20km_mar.-juin-09-23:46:42-2015.csv'),
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/europe_50km_sam.-juin-27-03:00:19-2015.csv'),
sep=";"
)
real_raw =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
colnames(real_raw)
real_raw$pop
summary(real_raw$pop)
hist(real_raw$pop,nbreak=1000)
hist(real_raw$pop,nbreaks=1000)
hist(real_raw$pop,breaks=1000)
pop = real_raw$pop
max(pop$)
max(pop)
real=real_raw[pop>100000,]
dim(real)
dim(real_raw)
real=real_raw[pop>500000,]
dil(real)
dim(real)
hist(real$pop,breaks=1000)
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");laws=c("log-normal","log-normal","inv-log-normal","log-normal")
ranges=list((1:2000)/1000,(1:2000)/1000,(1:2000)/1000,(-2000:-1)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=1000,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])*sign(fit[1])}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");laws=c("log-normal","log-normal","inv-log-normal","log-normal")
ranges=list((1:2000)/1000,(1:2000)/1000,(1:2000)/1000,(-2000:-1)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])*sign(fit[1])}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");laws=c("log-normal","log-normal","inv-log-normal","log-normal")
ranges=list((1:250)/1000,(1:20)/1000,(600:1000)/1000,(-2000:-800)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])*sign(fit[1])}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
help(fitdistr)
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","normal","normal","normal")
ranges=list((1:250)/1000,(1:20)/1000,(600:1000)/1000,(-2000:-800)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])*sign(fit[1])}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]]),"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","normal","normal","normal")
ranges=list((1:250)/1000,(1:20)/1000,(600:1000)/1000,(-2000:-800)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])*sign(fit[1])}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]]),"normal")
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","normal","normal","normal")
ranges=list((1:250)/1000,(1:20)/1000,(600:1000)/1000,(-2000:-800)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])*sign(fit[1])}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","normal","normal","normal")
ranges=list((1:250)/1000,(1:20)/1000,(600:1000)/1000,(-2000:-800)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])*sign(fit[1])}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","normal","normal","normal")
ranges=list((1:250)/1000,(1:25)/1000,(600:1000)/1000,(-2000:-800)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","normal","normal","normal")
ranges=list((1:250)/1000,(1:25)/1000,(600:1000)/1000,(-2500:-800)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
real=real_raw[pop>100000,]
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","normal","normal","normal")
ranges=list((1:250)/1000,(1:25)/1000,(600:1000)/1000,(-2500:-800)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","log-normal","normal","normal")
ranges=list((1:250)/1000,(1:25)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","log-normal","normal","normal")
ranges=list((1:250)/1000,(1:100)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
dim(real)
real=real_raw[pop>500000,]
dim(real)
5000/25
executeAlgo <- function(query,resDir,numIteration,kwLimit){
#java command to execute algo from jar
# providing query and result directory
conf <- read.table('confRScript.conf',sep=";",header=TRUE)
command <- paste0('java -jar ',conf$jar,' ',query,' ',resDir,' ',numIteration,' ',kwLimit,' ',conf$conf)
show(paste('Executing ',command))
system(command)
res = read.table(paste0(resDir,"/stats.csv"),header=FALSE,sep=";")
return(res)
}
queries <- c('transportation+network+urban+growth',
'city+system+network',
'land+use+transport+interaction',
'land+use+transport+interaction+network',
'population+density+transport',
'urban+structure+traffic',
'urban+flow+development',
'urban+morphogenesis+network',
'network+urban+modeling',
'transfer+theorem+probability',
'bike+sharing+transportation+system',
'bike+sharing',
'urban',
'city'
)
#resDir <- 'junk'
resDir <- 'cit'
queries<-c("land+use+transport+interaction","city+system+network","network+urban+modeling","population+density+transport","transportation+network+urban+growth","urban+morphogenesis+network")
resDir <- 'cit'
limits<-c(30)
maxIt <- 20
res=pairlist()
for(query in queries){
nrefs = matrix(data=rep(0,maxIt*length(limits)),nrow=maxIt)
resIt = pairlist();
for(l in 1:length(limits)){
resIt[[l]] = executeAlgo(query,resDir,maxIt,limits[l])
}
res[[query]]=resIt
}
save(res,file = 'res.rdata');
getwd()
setwd(paste0(Sys.getenv('CN_HOME'),"Models/Biblio/AlgoSR"))
setwd(paste0(Sys.getenv('CN_HOME'),"/Models/Biblio/AlgoSR"))
getwd()
queries<-c("land+use+transport+interaction","city+system+network","network+urban+modeling","population+density+transport","transportation+network+urban+growth","urban+morphogenesis+network")
resDir <- 'cit'
#limits<-c(1,2,3,4,5,6,7,8,9,10,15,20,25,30)
limits<-c(30)
maxIt <- 20
res=pairlist()
for(query in queries){
nrefs = matrix(data=rep(0,maxIt*length(limits)),nrow=maxIt)
resIt = pairlist();
for(l in 1:length(limits)){
resIt[[l]] = executeAlgo(query,resDir,maxIt,limits[l])
}
res[[query]]=resIt
}
save(res,file = 'res.rdata');
res
