for(k in 1:length(fixed_par_cols)){rows=rows&(abs(param[,fixed_par_cols[k]]-fixed_par_vals[k])<fixed_par_thresholds[k]); }
p=ggplot(data.frame(x=param[rows,x_param],
y=mean[rows,indicator],
group=param[rows,varying_param],
ymin=mean[rows,indicator]-sd[rows,indicator],
ymax=mean[rows,indicator]+sd[rows,indicator]),
aes(x=x,y=y,colour=group))
p+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(xlab)+ylab(ylab)
return(p)
}
#indics=c("accessibility","entropy","stability","travel-distance")
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in 1:length(indics_cols_toplot)){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = indics_cols_toplot[i],
x_param = xpars[x],
varying_param = 4,
xlab=colnames(vpar)[x],ylab=indics[indics_cols_toplot[i]]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[indics_cols_toplot[i]])
}
multiplot(plotlist=plotlist,cols=3)
}
#indics=c("accessibility","entropy","stability","travel-distance")
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in 1:length(indics_cols_toplot)){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = indics_cols_toplot[i],
x_param = xpars[x],
varying_param = 4,
xlab=colnames(vpar)[x],ylab=indics[indics_cols_toplot[i]]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[indics_cols_toplot[i]])
}
multiplot(plotlist=plotlist,cols=4)
}
library(RColorBrewer)
library(ggplot2)
library(MASS)
source(paste0(Sys.getenv('CN_HOME'),'/Models/Utils/R/plots.R'))
# data
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","log-normal","normal","normal")
ranges=list((1:250)/1000,(1:100)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
summary(real)
summary(real$distance)
hist(real$distance,breaks = 500)
h=hist(real$distance,breaks = 500)
h
help(bar)
help(bars)
plot(rev(h$mids),rev(h$density))
plot(h$mids,rev(h$density))
help(fitdistr)
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:100)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]],"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:100)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:1000)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:1000)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(
max(real[indic]) - real[[indic]]+1e-4,breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:1000)/1000,(1:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(
max(real[indic]) - real[[indic]]+1e-4,breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
#laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
laws=rep("",4)
ranges=list((1:250)/1000,(1:1000)/1000,(1:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
#laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
laws=rep("",4)
ranges=list((1:250)/1000,(1:1000)/1000,(1:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
#points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
###############
#
setwd('/Users/Juste/Documents/ComplexSystems/CityNetwork/Models/Biblio/AlgoSR')
files <- c('city+system+network_16','land+use+transport+interaction_8',
'network+urban+modeling_17','population+density+transport_14',
'transportation+network+urban+growth_14'
)
# get data
d=list()
for(i in 1:n){
d[[i]]=read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
}
setwd('/Users/Juste/Documents/ComplexSystems/CityNetwork/Models/Biblio/AlgoSR')
files <- c('city+system+network_16','land+use+transport+interaction_8',
'network+urban+modeling_17','population+density+transport_14',
'transportation+network+urban+growth_14'
)
n=length(files)
d=list()
for(i in 1:n){
d[[i]]=read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
}
for(i in 1:n){
for(j in 1:n){
show(j)
if(i != j){
for(k in 1:100){
for(l in 1:100){
if(as.character(d[[i]][k,1])==as.character(d[[j]][l,1])){
res[i,j] = res[i,j] + as.numeric(d[[i]][k,6])/as.numeric(d[[j]][k,6])
count[i,j] = count[i,j]+1
}
}
}
}
}
}
# res
res=matrix(0,n,n)
count =matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
show(j)
if(i != j){
for(k in 1:100){
for(l in 1:100){
if(as.character(d[[i]][k,1])==as.character(d[[j]][l,1])){
res[i,j] = res[i,j] + as.numeric(d[[i]][k,6])/as.numeric(d[[j]][k,6])
count[i,j] = count[i,j]+1
}
}
}
}
}
}
d
head(d)
count
setwd('/Users/Juste/Documents/ComplexSystems/CityNetwork/Models/Biblio/AlgoSR')
d1 <- read.csv('junk/refs_city+system+network_16_keywords.csv',header=TRUE,sep='\t')
d1[,1]
d1[,6] # score : 6th column (normilzed by doc frequency)
# all files
files <- c('city+system+network_16','land+use+transport+interaction_8',
'network+urban+modeling_17','population+density+transport_14',
'transportation+network+urban+growth_14'
)
# compute lexical distances
n=length(files)
# get data
d=list()
for(i in 1:n){
d[[i]]=read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
}
# res
res=matrix(0,n,n)
count =matrix(0,n,n)
res
kw <- c('city+system+network','land+use+transport+interaction',
'network+urban+modeling','population+density+transport',
'transportation+network+urban+growth'
)
par(mfrow=c(n,1))
for(c in  1:n){
hist(as.numeric(d[[c]][,6]),main = kw[c])
}
as.numeric(d[[c]][,6])
d1[,6] # score : 6th column (normilzed by doc frequency)
as.numeric(d[[c]][,6])
d[[c]][,6]
par(mfrow=c(n,1))
for(c in  1:n){
hist(d[[c]][,6],main = kw[c])
}
kw[c]
levels(d[[c]][,6]
)
as.numeric(levels(d[[c]][,6]))
help(as.numerci)
help(as.numeric)
as.numeric(gsub(",", ".",levels(d[[c]][,6])))
par(mfrow=c(n,1))
for(c in  1:n){
hist(as.numeric(gsub(",", ".",levels(d[[c]][,6]))),main = kw[c])
}
as.numeric(gsub(",", ".",levels(d[[c]][,6])))
n
par(mfrow=c(1,1))
hist(as.numeric(gsub(",", ".",levels(d[[c]][,6]))),main = kw[c])
hist(as.numeric(gsub(",", ".",levels(d[[c]][,6]))),main = kw[c],breaks=50)
hist(as.numeric(gsub(",", ".",levels(d[[c]][,6]))),main = kw[c],breaks=20)
hist(as.numeric(gsub(",", ".",levels(d[[c]][,6]))),breaks=30,xlab= kw[c])
hist(as.numeric(gsub(",", ".",levels(d[[c]][,6]))),breaks=30,xlab= kw[c],main="")
par(mfrow=c(5,1))
for(c in  1:n){
hist(as.numeric(gsub(",", ".",levels(d[[c]][,6]))),breaks=30,xlab= kw[c],main="")
}
for(i in 1:n){
for(j in 1:n){
show(j)
if(i != j){
for(k in 1:100){
for(l in 1:100){
if(as.character(d[[i]][k,1])==as.character(d[[j]][l,1])){
res[i,j] = res[i,j] + as.numeric(d[[i]][k,6])+as.numeric(d[[j]][l,6])
count[i,j] = count[i,j]+1
}
}
}
}
}
}
d[[i]][k,6]
unlist(d[[i]][k,6])
help(factor)
read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
dim(read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t'))
scores = matrix(0,100,n)
dim(scores)
m=read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
d=list()
scores = matrix(0,100,n)
for(i in 1:n){
m=read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
d[[i]]=m
scores[,i]=m[,6]
}
scores
read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')[,6]
d=list()
scores = matrix(0,100,n)
for(i in 1:n){
m=read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
d[[i]]=m
scores[,i]=as.numeric(gsub(",", ".",levels(m[,6])))
}
d1 <- read.csv('junk/refs_city+system+network_16_keywords.csv',header=TRUE,sep='\t')
d1[,9]
d=list()
scores = matrix(0,100,n)
for(i in 1:n){
m=read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
d[[i]]=m
scores[,i]=as.numeric(gsub(",", ".",levels(m[,6])))[m[,6]]
}
scores
d=list()
scores = matrix(0,100,n)
for(i in 1:n){
m=read.csv(paste0('junk/refs_',files[i],'_keywords.csv'),header=TRUE,sep='\t')
d[[i]]=m
scores[,i]=as.numeric(gsub(",", ".",levels(m[,9])))[m[,9]]
}
scores
res=matrix(0,n,n)
count =matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
show(j)
if(i != j){
for(k in 1:100){
for(l in 1:100){
if(as.character(d[[i]][k,1])==as.character(d[[j]][l,1])){
res[i,j] = res[i,j] +scores[k,i]+scores[l,j]
count[i,j] = count[i,j]+1
}
}
res[i,j] = res[i,j] / (sum(scores[,i]) + sum(scores[,j]))
}
}
}
}
res
count
# res
res=matrix(0,n,n)
count =matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
show(j)
if(i != j){
for(k in 1:100){
for(l in 1:100){
if(as.character(d[[i]][k,1])==as.character(d[[j]][l,1])){
res[i,j] = res[i,j] +scores[k,i]+scores[l,j]
count[i,j] = count[i,j]+1
}
}
#res[i,j] = res[i,j] / (sum(scores[,i]) + sum(scores[,j]))
}
}
}
}
count
res
scores[,i]
sum(scores[,i])
sum(scores[,j])
res=matrix(0,n,n)
count =matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
show(j)
if(i != j){
for(k in 1:100){
for(l in 1:100){
if(as.character(d[[i]][k,1])==as.character(d[[j]][l,1])){
res[i,j] = res[i,j] +scores[k,i]+scores[l,j]
count[i,j] = count[i,j]+1
}
}
}
}
res[i,j] = res[i,j] / (sum(scores[,i]) + sum(scores[,j]))
}
}
res
for(i in 1:n){
show(sum(scores[,i]))
}
