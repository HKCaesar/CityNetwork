#kwIndex = 1
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 4)))
for(kwIndex in 1:length(queries)){
show(queries[kwIndex])
kwLimit = c();refs=c()
for(i in 1:length(res[[kwIndex]])){
for(t in 1:maxIt){
refs = append(refs,res[[kwIndex]][[i]][t,1]);
kwLimit = append(kwLimit,limits[i])
}
}
#show(floor(kwIndex/4)+1);show((kwIndex%%4))
dat = data.frame(refs,kwLimit,time)
print(ggplot(dat, aes(colour=kwLimit, y= refs, x= time))+ geom_line(aes(group=kwLimit)) + ggtitle(queries[kwIndex]), vp = vplayout(floor((kwIndex-1)/4)+1,kwIndex-(floor((kwIndex-1)/4))*4))
}
queries <- c('transportation+network+urban+growth',
'city+system+network',
'land+use+transport+interaction',
'population+density+transport',
'urban+structure+traffic',
'urban+flow+development',
'urban+morphogenesis+network',
'network+urban+modeling'
)
resDir <- 'junk'
limits<-c(2,5,7,10,15,20,25,30)
maxIt <- 20
library(ggplot2)
library(grid)
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
time = 1:maxIt
#kwIndex = 1
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 4)))
for(kwIndex in 1:length(queries)){
show(queries[kwIndex])
kwLimit = c();refs=c()
for(i in 1:length(res[[kwIndex]])){
for(t in 1:maxIt){
refs = append(refs,res[[kwIndex]][[i]][t,1]);
kwLimit = append(kwLimit,limits[i])
}
}
#show(floor(kwIndex/4)+1);show((kwIndex%%4))
dat = data.frame(refs,kwLimit,time)
print(ggplot(dat, aes(colour=kwLimit, y= refs, x= time))+ geom_line(aes(group=kwLimit)) + ggtitle(queries[kwIndex]), vp = vplayout(floor((kwIndex-1)/4)+1,kwIndex-(floor((kwIndex-1)/4))*4))
}
load("/Users/Juste/Documents/ComplexSystems/CityNetwork/Models/Biblio/AlgoSR/res.rdata")
res
res[[queries[1]]]
res[[queries[1]]][[1]]
res[[queries[1]]][[5]]
res[[queries[1]]][[5]][1:12,17:31]
hist(res[[queries[1]]][[5]][1:12,17:31])
res[[queries[1]]][[5]][1:12,17:31]
as.numeric(res[[queries[1]]][[5]][1:12,17:31])
as.matrix(res[[queries[1]]][[5]][1:12,17:31])
hist(as.matrix(res[[queries[1]]][[5]][1:12,17:31]))
help("hist")
barplot(as.matrix(res[[queries[1]]][[5]][1:12,17:31]))
barplot(as.matrix(res[[queries[1]]][[5]][1:12,17:31]),beside=TRUE)
bars <- function(qIndex){
barplot(as.matrix(res[[queries[qIndex]]][[5]][1:12,17:31]),beside=TRUE,main=queries[qIndex])
}
par(mfrow=c(2,2))
barplot(1);barplot(2);barplot(3);barplot(4)
barplot(1);
bars <- function(qIndex){
barplot(as.matrix(res[[queries[1]]][[5]][1:12,17:31]),beside=TRUE)#,main=queries[qIndex])
}
barplot(1);
par(mfrow=c(1,1))
barplot(1);
barplot(as.matrix(res[[queries[1]]][[5]][1:12,17:31]),beside=TRUE)
bars <- function(qIndex){
# need to normalize !
barplot(as.matrix(res[[queries[qIndex]]][[5]][1:12,17:31]),beside=TRUE,main=queries[qIndex])
}
bars <- function(qIndex){
# need to normalize !
barplot(as.matrix(res[[queries[qIndex]]][[5]][1:12,17:31]),beside=TRUE,main=queries[qIndex])
}
par(mfrow=c(2,2))
bars(1);
bars <- function(qIndex){
# need to normalize !
barplot(as.matrix(res[[queries[qIndex]]][[5]][1:12,17:31]),beside=TRUE,main=queries[qIndex])
}
par(mfrow=c(2,2))
bars(1);
barplot(2);barplot(3);barplot(4)
bars <- function(qIndex){
# need to normalize !
barplot(as.matrix(res[[queries[qIndex]]][[5]][1:12,17:31]),beside=TRUE,main=queries[qIndex])
}
par(mfrow=c(2,2))
bars(1);
bars(2);bars(3);bars(4)
limits
bars <- function(qIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[4]][1:10,17:31])
barplot(
m
,beside=TRUE
,main=queries[qIndex])
}
par(mfrow=c(2,2))
bars(1);
bars(2);bars(3);bars(4)
as.matrix(res[[queries[qIndex]]][[4]][1:10,])
as.matrix(res[[queries[1]]][[4]][1:10,])
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][1:limits[lIndex],(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / m[i,1]
}
barplot(
m
,beside=TRUE
,main=queries[qIndex])
}
par(mfrow=c(2,2))
bars(1,4);bars(2,4);bars(3,4);bars(4,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][1:limits[lIndex],(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / m[i,1]
}
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex])
}
par(mfrow=c(2,2))
bars(1,4);bars(2,4);bars(3,4);bars(4,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][1:limits[lIndex],(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex])
}
par(mfrow=c(2,2))
bars(1,4);bars(2,4);bars(3,4);bars(4,4)
queries
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex]
,xlabel=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex]
,xlabel=1:length(m[,1])
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex]
,xlab=1:length(m[,1])
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
help("plot")
help('par')
help("barplot")
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex]
,names.arg=1:length(m[,1])
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex]
,names.arg=as.string(1:length(m[,1]))
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
show(m)
m$rownames <- (1:length(m[,1]))
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
show(m)
m$colnames <- (1:length(m[,1]))
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
m$colnames <- (1:length(m[,1]))
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
#m$colnames <- (1:length(m[,1]))
show(data.frame(data=m))
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)])
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
#m$colnames <- (1:length(m[,1]))
show(data.frame(data=m))
barplot(
data.frame(data=m)
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
help('as.matrix')
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)],
colnames=1:length(m[,1]))
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
#m$colnames <- (1:length(m[,1]))
show(data.frame(data=m))
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)],
colnames=1:length(m[,1]))
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
#m$colnames <- (1:length(m[,1]))
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)],
colnames=1:length(m[,1]),colnames.force=TRUE)
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
#m$colnames <- (1:length(m[,1]))
show(m)
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)],
colnames=1:length(m[,1]),colnames.force=TRUE)
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
#m$colnames <- (1:length(m[,1]))
show(m.colnames)
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)],)
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
#m$colnames <- (1:length(m[,1]))
show(colnames(m))
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)],)
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
colnames(m) <- (1:length(m[,1]))
show(colnames(m))
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)],)
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
colnames(m) <- (1:length(m[1,]))
show(colnames(m))
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
bars <- function(qIndex,lIndex){
# need to normalize !
m = as.matrix(res[[queries[qIndex]]][[lIndex]][,(limits[lIndex]+2):(2*limits[lIndex]+1)],)
for(i in 1:length(m[,1])){
m[i,] <- m[i,] / res[[queries[qIndex]]][[lIndex]][i,1]
}
colnames(m) <- (1:length(m[1,]))
show(colnames(m))
barplot(
m
,beside=TRUE
,main=queries[qIndex]
#,names.arg=
)
}
par(mfrow=c(2,2))
bars(5,4);bars(6,4);bars(7,4);bars(8,4)
par(mfrow=c(2,2))
bars(1,4);bars(2,4);bars(3,4);bars(4,4)
par(mfrow=c(2,2))
bars(5,2);bars(6,2);bars(7,2);bars(8,2)
par(mfrow=c(2,2))
bars(1,2);bars(2,2);bars(3,2);bars(4,2)
getwd()
setwd("/Users//Juste/Documents/ComplexSystems/CityNetwork/Models//Biblio/AlgoSR/")
list.files
list.files()
executeAlgo <- function(query,resDir,numIteration,kwLimit){
#java command to execute algo from jar
# providing query and result directory
conf <- read.table('confRScript.conf',sep=";",header=TRUE)
command <- paste0('java -jar ',conf$jar,' ',query,' ',resDir,' ',numIteration,' ',kwLimit,' ',conf$conf)
show(paste('Executing ',command))
system(command)
res = read.table(paste0(resDir,"/stats.csv"),header=FALSE,sep=";")
return(res)
}
queries <- c('transportation+network+urban+growth')#,
limits<-c(2)#,5,7,10,15,20,25,30)
res=pairlist()
for(query in queries){
nrefs = matrix(data=rep(0,maxIt*length(limits)),nrow=maxIt)
resIt = pairlist();
for(l in 1:length(limits)){
resIt[[l]] = executeAlgo(query,resDir,maxIt,limits[l])
}
res[[query]]=resIt
}
res=pairlist()
for(query in queries){
nrefs = matrix(data=rep(0,maxIt*length(limits)),nrow=maxIt)
resIt = pairlist();
for(l in 1:length(limits)){
resIt[[l]] = executeAlgo(query,resDir,maxIt,limits[l])
}
res[[query]]=resIt
}
res
res
length(res)
length(res[[1]])
length(res[[1]][[1]])
res[[1]][[1]]
