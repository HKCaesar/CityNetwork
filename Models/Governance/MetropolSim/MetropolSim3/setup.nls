
;;;;;;;;;;;;;;;;;;;;;
;; setup.nls
;;;;;;;;;;;;;;;;;;;;;


;;
; General setup
to setup
  
  clear-all
  reset-ticks
  
  output-print "Setting up"
  
  ; setup initial governance
  setup-territories
  
  ; setup initial configuration
  setup-initial-distributions
  
  ; setup initial network
  setup-initial-network
  
  ; cached distances
  setup-cached-distances
  
  ; display
  setup-display
  
end


;;
; setup mayors and governed patches
to setup-territories
  
  output-print "... Territories"
  
  ; create mayors
  create-mayors #-initial-territories [
    initial-position-mayor
    new-mayor
  ]
  
  ; setup governance areas
  ask patches [set governing-mayor one-of mayors with-min [distance myself] set pcolor [color] of governing-mayor]
  ; no need to cache governed patches, quickly accessed ?
  
  ; create regional authority
  create-mayors 1 [set regional-authority self set hidden? true]
  
end



;;
;  Setup initial distributions of actives and employments (polycentric Bussiere model)
to setup-initial-distributions
  
  output-print "... Distributions"
  
  ; use monocentric kernel application function
  let centers [patch-here] of mayors
  foreach centers [
    apply-monocentric-kernel "poisson" actives-spatial-dispersion actives-max "actives" ?
    apply-monocentric-kernel "poisson" employments-spatial-dispersion employments-max "employments" ?
  ]
  
  ; setup patches number
  let p 0
  repeat count patches [
    let x (floor (p / world-width)) + min-pxcor let y (p - world-width * floor (p / world-width)) + min-pycor
    ask (patch x y) [set number p] set p p + 1 
  ]
  
  ; setup global lists
  set patches-employments rep 0 count patches
  set patches-actives rep 0 count patches
  ask patches [
    set patches-employments replace-item number patches-employments employments
    set patches-actives replace-item number patches-actives actives
  ]
  
end

;;
; Setup display
to setup-display
  color-patches
  draw-boundaries
end


;;
; Initial network
;
;  - no nw for now ? -
to setup-initial-network
  
  ;; try a radioconcentric network ? or use slime mould ?
  
end


;;
; Cached distances : initialize matrices
;
to setup-cached-distances
  
  output-print "Caching distances"
  
  let N count patches
  set dmax sqrt ((world-width ^ 2) + (world-height ^ 2))  
  
  ; euclidian distance matrix
  set euclidian-distance-matrix matrix:make-constant N N 0
  let p1 0 let p2 0
  repeat n [
     let x1 (floor (p1 / world-width)) + min-pxcor let y1 (p1 - world-width * floor (p1 / world-width)) + min-pycor
     
     ; profite of this loop to set correspondance number <-> coordinates ? NO has to be done before !
     ;ask (patch x1 y1) [set number p1] 
     
     set p2 0
     repeat n [
        let x2 (floor (p2 / world-width)) + min-pxcor let y2 (p2 - world-width * floor (p2 / world-width)) + min-pycor
        matrix:set euclidian-distance-matrix p1 p2 sqrt ((x1 - x2) ^ 2 + (y1 - y2) ^ 2) 
        set p2 p2 + 1
     ]
     set p1 p1 + 1
  ]
  
  ; setup nw matrices, needed in particular if initial nw
  setup-nw-matrices
  
  ; use generic function
  update-effective-matrices
  
  
end


to setup-nw-matrices
  output-print "NW shortest distances"
  let n count patches
  ifelse count transportation-nodes = 0 [
    ; initialize nw distance at infty = dmax + 1  if no nw  
    set network-distance-matrix matrix:make-constant n n (dmax + 1)
    set network-shortest-paths table:make let i 0 repeat n [let j 0 repeat n [table:put network-shortest-paths (list i j) [] set j j + 1] set i i + 1]
  ][
    
  ]
end







