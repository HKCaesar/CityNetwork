
;;;;;;;;;;;;;
;; transportation
;;;;;;;;;;;;;



;;
;  Transportation module of the luti model
;
;  Uses cached shortest paths to compute congestion.
to transportation
  
  ; compute patch to patch flows through furness algorithm
  compute-flows
  
  ; use effective paths matrix to compute wardrop ?
  transportation-affectation
  
  ; update congestion given the affectation
  update-congestion
  
end


;;
; Furness algo
to compute-flows
  
  ;let n count patches
  
  ; initial weights
  let p rep (1 / #-patches) #-patches let q rep (1 / #-patches) #-patches
  ; reinitialize matrix
  set flow-matrix matrix:make-constant #-patches #-patches 0
  
  ; compute (equilibrium ?) weights
  ; how many iterations needed ?
  let n-iter-furness 10
  repeat n-iter-furness [    
    let ptemp p let qtemp q
    set p map [1 / ?] (matrix:times effective-distance-matrix (list-times-element-wise qtemp patches-employments))
    set q map [1 / ?] (matrix:times effective-distance-matrix (list-times-element-wise ptemp patches-actives))
  ]
  
  ; then set flows as \phi_ij = p_i*q_j*A_i*E_j*effective_distance(i,j)
  ;   -> Q : here effective dist takes into account network
  
  set flow-matrix matrix:times-element-wise (matrix:times-element-wise (matrix:from-column-list (rep (list-times-element-wise p patches-actives) #-patches)) (matrix:from-row-list (rep (list-times-element-wise q patches-employments) #-patches))) effective-distance-matrix
  
  
end


;;
; compute the affectation of user trajectories though iterated wardrop eq determination (?)
;
; Initial flow matrix as argument ? not needed as global var.
to transportation-affectation
  
end



;;
; update congestion
to update-congestion
  
  ; TODO : depends on affectation
  set patches-congestion rep 1 (count patches)
  
end