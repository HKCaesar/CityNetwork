
;;;;;;;;;;;;;;;;
;; governance
;;;;;;;;;;;;;;;;


;; 
;  Transportation network evolution (governance part of the model)
;
;  Contiguous actors with most wealth take decision ; or top-down regional planning.
;
;
to governance
  
  ; get agents making the decision
  let decidors decision-makers
  
  ; corresponding potential place for infrastructures
  let infra-choices potential-infrastructures decidors
  
  ; construct the best one
  construct-infrastructure decidors (best-infrastructure decidors infra-choices)
  
  
end


;;
; Gets mayors taking the decision at this step - can be region ?
to-report decision-makers
  
  ifelse random-float 1 < regional-decision-proba [
     ; regional decision
     report regional-authority
  ][
     ; local decision : choose according to wealth
     ; choose neighbor pairs with maximal weight
     ; dirty way ok as very few mayors
     ;  -- TODO -- for now not random
     let ma 0 let maxpair []
     ask mayors[ask other mayors [let etot [employments] of self + [employments] of myself if etot > ma [set ma etot set maxpair (list self myself)]]]
     report maxpair
  ]
  
end


;;
; Reports a list of potential infras (which format ?)
;
;  FIND Heuristic in order to exploit reduced part of the space (already too long with very few patches if in O(n^2)
;  here no game, report indifferently common and alone infras ? or report with distinct feature ?
to-report potential-infrastructures [decidors]
  ifelse decidors = regional-authority [
    
  ][
    
  ]
  
  ; for tests : random infras
  let res [] repeat 10 [set res lput (list (list random-xcor random-ycor) (list random-xcor random-ycor)) res]
  report res
end


;;
; Given a set of choices and decidors, find the best infrastructure
;
;  Implement the game between the two players here -> evaluate all costs (have to be done anyway), then draw randomly issue of the game according to individual utilities 
;
;  @returns list of coordinates of extremities (better not to construct links here -> sure, as capacity congestion etc are not used at this step : only matrix needed.
to-report best-infrastructure [decidors choices]
  ifelse decidors = regional-authority [
    ; no game, find the best among the choices
    
    
  ][
    
  ]
  
  ; for tests
  report one-of choices
end


;;
; Construct the given infrastructure
;
; Update matrices distances etc here !
to construct-infrastructure [decidors infra]
  
  ; construct the infra
  let e1 nobody let new-link nobody
  create-transportation-nodes 1 [new-transportation-node setxy first first infra last first infra set e1 self]
  create-transportation-nodes 1 [
    new-transportation-node setxy first last infra last last infra
    create-transportation-link-with e1 [new-transportation-link set new-link self]
  ]
  
  ; update matrices
  update-network-matrices new-link
  update-effective-matrices
  
  ; then correct the network by planarization if intersecting links.
  ; Beware, has to be done AFTER updating matrices, as nw updating needs footprint of the link (fastest way to get patches newly connected to the network
  ;  but planarizing before would kill the entire links, cutting it into smaller
  planarize-network transportation-nodes transportation-links
  
end



