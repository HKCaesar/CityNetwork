import java.text.SimpleDateFormat
import java.util.Date

import Model._

val local = LocalEnvironment(50)
//val grid = EGIEnvironment("vo.complex-systems.eu")

/*
val rates = Map("1831-1851"->0.12,"1841-1861"->0.17,"1851-1872"->0.13,"1881-1901"->0.075,
     "1891-1911"->0.08,"1921-1936"->0.08,"1946-1968"->0.13,"1962-1982"->0.1,"1975-1990"->0.05)
*/

val datestr = (new SimpleDateFormat("yyyyMMdd")).format(new Date())
//val purpose = "periods_fullmodel_grid"
val purpose = "test_calibnsga_2"
val resdir = datestr+"_"+purpose


def calib(period: String) = {
  
  val filename = s"pop50_${period}.csv"
  val datefilenames = s"dates_${period}.csv"
  
  val fileSetting = ExplorationTask(
    (popFile is workDirectory / "data" / "pops" / filename ) x //"pops" / filename) x
    (distFile is workDirectory / "data"/ "dist50.csv") x
    (fdistsFile is workDirectory / "data" / "distMat_Ncities50_alpha03_n03.csv") x 
    (dateFile is workDirectory / "data" / "dates" / datefilenames) x
    (id in Seq(1)) x (gravityAlpha in Seq(0.0))
    x (feedbackWeight in Seq(0.0)) x (feedbackGamma in Seq(1.0)) x (feedbackDecay in Seq(1.0))// x
    //(growthRate in Seq(rates(period)))
    //x (gravityWeight is (growthRate / 20))
  ) set(
    inputs += (growthRate,gravityWeight,gravityGamma,gravityDecay),//,gravityWeight,feedbackWeight,feedbackGamma,feedbackDecay),
    outputs += (growthRate,gravityWeight,gravityGamma,gravityDecay)
  )

/*
  val varSetting = ScalaTask("val gravityWeight = growthRate / 20") set (
    inputs += (growthRate,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay),
    outputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay)
  )
*/

  val eval = fileSetting -< model

  val evolution =
    SteadyStateEvolution(
      algorithm =   
        NSGA2(
          mu = 200,
          genome = 
            Seq(
              growthRate in Range(0.0, 1.0),
              gravityWeight in Range(0.0,0.1),
              gravityGamma in Range(0.0,10.0),
              gravityDecay in Range(0.0,100.0)//,
              //feedbackWeight in Range(0.0,10.0),
              //feedbackGamma in Range(0.0,100.0),
              //feedbackDecay in Range(0.0,1e15)
            ),
          objectives = Seq(logmse,mselog)
        ),
      evaluation = eval,
      termination = 200
    )
  
  val island = IslandEvolution(evolution, parallelism = 50,termination=10000)//100, termination = 1000)

  val savePopulation = SavePopulationHook(island, workDirectory / "calibration" / resdir / period) 

  (island on local hook savePopulation)

}


//val periods = Seq("1831-1851","1841-1861","1851-1872","1881-1901","1891-1911","1921-1936","1946-1968","1962-1982","1975-1990")
val periods = Seq("1831-1851")

val firstCapsule = Capsule(EmptyTask())
val calibrations = periods.map(calib)
calibrations.map(firstCapsule -- _).reduce(_ & _)



