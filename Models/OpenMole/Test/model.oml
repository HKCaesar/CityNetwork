//import java.io._
//import java.lang.Process
import sys.process._

// basic openmole workflow with netlogo model
//
// Test on elaborated model with external sources


// varying parameters

val beta = Val[Double]
val lambda = Val[Double]
val replication = Val[Int]


// exploration task

val exploration =
  ExplorationTask(
    (beta in (10.0 to 100.0 by 20.0)) x
    (lambda in (0.0 to 1.0 by 0.5)) x
    (replication in (UniformDistribution[Int]() take 2))
  )


//define netlogo task


// reporters
val length=Val[Double]
val diameter=Val[Double]


val cmds = List(
  "setup-experiment ${lambda} ${beta}",
  "go-experiment")



// Call external deamon converting NL multiple sources into single file model
// using java Runtime call - is it optimal here in scala ?
/*val p = Val[java.lang.Process];val reader = Val[java.io.BufferedReader];val line = Val[String]
p=java.lang.Runtime.getRuntime().exec("ls")
p.waitFor()
reader=new BufferedReader(new InputStreamReader(p.getInputStream()))
line=reader.readLine()
while(line!=null) {println(line);line=reader.readLine();}
*/
"ls" !


/*

val model = NetLogo5Task("Headless_LocalDistanceMin.nlogo",cmds) set (
  inputs += (lambda, beta),
  netLogoOutputs += ("network-length", length),
  netLogoOutputs += ("network-diameter", diameter)
)

// try adding external nls source

val files = Val[Array[File]]
val s = ListFilesSource("includes", files)


// output
val h = ToStringHook()

val startTime = System.currentTimeMillis

// environement
val env = LocalEnvironment(3)


logger.level("DEBUG")

val exec = exploration -< (model source s on env hook h) start

exec.waitUntilEnded

println((System.currentTimeMillis - startTime) / 1000.0)

*/