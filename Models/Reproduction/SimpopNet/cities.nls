
;;;;
;; cities
;;;;





to grow-cities
  
  if (city-growth-model = "Gibrat")       [grow-gibrat]
  if (city-growth-model = "coevolution")  [grow-coevolution]
  
end




;*********************************************
;                                            *
;           Gibrat                           *
;                                            *
;*********************************************

to grow-gibrat
  ask cities
  [
    let previous-pop population
    set population max list 0 ((previous-pop * (1 + gibrat-growthrate)))
    if population < 1 [die]
  ]
end



;;
; Gibrat growth rate
; not necessary ? -> may be useful in case of various implementation (noisy Gibrat, etc)
to-report gibrat-growthrate
  let rand-nb 0
  set rand-nb random-normal gibrat-mean gibrat-std
  report rand-nb
end



  
to compute-tempor-pop
    ask cities [ 
      set N-city-pot-int (lambda ^ beta * ((count cities) / system-pot-int) * city-pot-int)
      set  tmp-pop (population * (1 + N-city-pot-int))
      ]
end 
  
  
  
  

;*******************************************
; calcul de l'indice d'accessibilité d'un noeud
;*******************************************

 to calculate-accessibility
   ask cities [
     set accessibility value-accessibility
     ]
   
   ;; -- display : should be moved --
   map-accesibility
 end
 
 
; display
to map-accesibility
  let max-accesibility 0
  set max-accesibility max [accessibility] of cities
  ask cities[set color scale-color green accessibility 0 max-accesibility]
end


;;
; Shimbel accessibility
;  A_i = \sum_j t_{nw}(i,j)
to-report value-accessibility
     let acc -1
     let listpcc []
     let compteur 1
      ask other cities [
       ;print (word "Appellé : " self)
       let tpspcc 0
       set tpspcc time-network self myself
       set listpcc lput tpspcc listpcc
       set compteur compteur + 1 
       ]
     set acc sum listpcc
;     print "-> !" 
     report acc  
 end

