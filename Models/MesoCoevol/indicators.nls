
;;
;  Indicators


to compute-indicators
  cache-nw-measures
  output-print (word "diameter : " nw-diameter)
  output-print (word "path-length : " mean-path-length)
  output-print (word "centrality : " mean-bw-centrality)
  output-print (word "relative speed : " mean-relative-speed)
  output-print (word "length : " total-nw-length)
end







;;
; nw diameter
;  Normalized by world diag
to-report nw-diameter
  let diag sqrt (world-width ^ 2 + world-height ^ 2)
  report max map [sum map [[road-length] of ?] ?] (table-values shortest-paths) / diag
end


;;
; mean path length
;  Normalized by world diagonal
to-report mean-path-length
  let diag sqrt (world-width ^ 2 + world-height ^ 2)
  report (mean map [sum map [[road-length] of ?] ?] (table-values shortest-paths)) / diag
end

;;
;  bw centrality, normalized by number of paths considered
to-report mean-bw-centrality
  let n count cities
  report (mean [bw-centrality] of roads) * 2 / (n * (n - 1))
end

;;
; nodes bw centrality
to-report mean-city-bw-centrality
  let n count cities
  report (mean [city-bw-centrality] of cities) * 2 / (n * (n - 1))
end

;;
; mean relative speed, already normalized
to-report mean-relative-speed
  report mean table-values nw-relative-speeds
end

;;
; nw length -> not normalized
to-report total-nw-length
  report sum [road-length] of roads
end


to export-nw [file-prefix]
  let cities-coords [(list xcor ycor who)] of cities
  let roads-ids [(list [who] of end1 [who] of end2)] of roads
  let cities-file (word file-prefix "_cities.csv")
  let roads-file (word file-prefix "_roads.csv")
  
  foreach cities-coords [
    print-in-file cities-file implode-with-delimiter ? ";"
  ]
  
  foreach roads-ids [
    print-in-file roads-file implode-with-delimiter ? ";"
  ]
  
end




