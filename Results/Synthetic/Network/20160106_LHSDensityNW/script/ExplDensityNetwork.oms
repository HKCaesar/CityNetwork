import java.text.SimpleDateFormat
import java.util.Date
//logger.level("FINE")

// exploration with both varying density and parameters
import density._


// Parameters
val diffusion = Val[Double]
val diffusionsteps = Val[Double]
val alphalocalization = Val[Double]
val growthrate = Val[Double]
val population = Val[Double]

val replication = Val[Int]

// Reporters
val moran=Val[Double]
val distance=Val[Double]
val entropy=Val[Double]
val slope=Val[Double]
val rsquared=Val[Double]

// config file
val config=Val[File]


// network
val citiesNumber = Val[Double]
val gravityRadius = Val[Double]
val gravityInflexion = Val[Double]
val hierarchyRole = Val[Double]
val gravityHierarchyExponent = Val[Double]
val maxNewLinksNumber = Val[Double]

// density config
val densityConfig = Val[String]

// indicators
// morpho indics are directly linked to config ; computed separately
val nwDiameter = Val[Double]
val meanPathLength = Val[Double]
val meanBwCentrality = Val[Double]
val meanRelativeSpeed = Val[Double]
val nwLength = Val[Double]

// unique id
val id = Val[Int]
val idpar = Val[Int]


// Model
val densityModel =
  ScalaTask(
    """
      | import density._
      | val config = newFile()
      | val gen = new PADGeneratorLauncher
      | gen.main(50,input.population,input.diffusion,input.diffusionsteps,input.growthrate,input.alphalocalization,input.replication,config)
      | val moran = gen.moran
      | val distance = gen.distance
      | val entropy = gen.entropy
      | val slope = gen.slope
      | val rsquared = gen.rsquared
    """.stripMargin
  ) set (
    imports += "density._",
    plugins += pluginsOf[PADGeneratorLauncher],
    inputs += (id,idpar,diffusion,diffusionsteps,alphalocalization,growthrate,population,replication,citiesNumber,gravityRadius,gravityInflexion,hierarchyRole,gravityHierarchyExponent,maxNewLinksNumber),
    outputs += (id,idpar,diffusion,diffusionsteps,alphalocalization,growthrate,population,replication,citiesNumber,gravityRadius,gravityInflexion,hierarchyRole,gravityHierarchyExponent,maxNewLinksNumber),
    outputs += (moran,distance,entropy,slope,rsquared),
    outputs += config
  )
val densityModelCapsule = Capsule(densityModel)


// define a specific capsule to copy config out of density model
//val densityFileHook = CopyFileHook(config,workDirectory / "pop/config_${id}.csv")
val densityFileTask = ScalaTask("val densityConfig = \""+workDirectory.toString+"/pop/config_\"+input.id+\".csv\" ") set (
  inputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,replication,citiesNumber,gravityRadius,gravityInflexion,hierarchyRole,gravityHierarchyExponent,maxNewLinksNumber,moran,distance,entropy,slope,rsquared),
  inputs += (id,idpar,config),
  outputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,replication,citiesNumber,gravityRadius,gravityInflexion,hierarchyRole,gravityHierarchyExponent,maxNewLinksNumber,moran,distance,entropy,slope,rsquared),
  outputs += (densityConfig,config,id,idpar)
)

val copyHook = CopyFileHook(config,workDirectory / "pop/config_${id}.csv")


// network model
val cmds = List("setup-experiment ${citiesNumber} ${gravityRadius} ${gravityInflexion} ${hierarchyRole} ${gravityHierarchyExponent} ${maxNewLinksNumber} ${alphalocalization} \"${densityConfig}\" ${id}","run-experiment")
val nwModel = NetLogo5Task(workDirectory / "model/HEADLESS_SyntheticNetwork.nlogo", cmds,embedWorkspace = true) set (
    inputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,replication,citiesNumber,gravityRadius,gravityInflexion,hierarchyRole,gravityHierarchyExponent,maxNewLinksNumber,moran,distance,entropy,slope,rsquared,densityConfig,id,idpar),
    outputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,replication,citiesNumber,gravityRadius,gravityInflexion,hierarchyRole,gravityHierarchyExponent,maxNewLinksNumber,moran,distance,entropy,slope,rsquared,id,idpar),
    //outputs +=(nwDiameter,meanPathLength,meanBwCentrality,meanRelativeSpeed,nwLength),
    netLogoOutputs += ("nw-diameter", nwDiameter),
    netLogoOutputs += ("mean-path-length", meanPathLength),
    netLogoOutputs += ("mean-bw-centrality",meanBwCentrality),
    netLogoOutputs += ("mean-relative-speed",meanRelativeSpeed),
    netLogoOutputs += ("total-nw-length",nwLength)
)

val nwModelCapsule = Capsule(nwModel)

//val taskFlow = Capsule(densityModelCapsule -- (Capsule(densityFileTask) hook copyHook) -- (nwModelCapsule hook h))


val rmPopFile = ScalaTask("val f = new File(\""+workDirectory.toString+"/pop/config_\"+input.id+\".csv\");f.delete();System.gc()") set (inputs += id)



val correplication = Val[Int]
val correpid = Val[Int]

// exploration


val exploration = ExplorationTask (
  ((LHS (
    1000,
    diffusion in Range(0.0, 0.3),
    alphalocalization in Range(0.8,1.8),
    growthrate in Range(500.0,3000.0),
    population in Range(10000.0,100000.0),
    diffusionsteps in Range(1.0,4.0),
    citiesNumber in Range(50.0, 120.0),
    gravityRadius in Range(1.0,100.0),
    gravityInflexion in Range(0.1,10.0),
    hierarchyRole in Range(0.0,1.0),
    gravityHierarchyExponent in Range(0.1,4.0),
    maxNewLinksNumber in Range(4.0,20.0)
  ) withIndex idpar) x(replication in (UniformDistribution[Int]() take 80))) withIndex id
)
val purpose = "LHS_DENSITYNW"


/*
val exploration = ExplorationTask (
  ((LHS (
    1,
    diffusion in Range(0.14, 0.15),
    alphalocalization in Range(2.6,2.65),
    growthrate in Range(2700.0,2701.0),
    population in Range(27000.0,27001.0),
    diffusionsteps in Range(4.99,5.0),
    citiesNumber in Range(63.0, 63.5),
    gravityRadius in Range(76.5,77.0),
    gravityInflexion in Range(3.8,3.9),
    hierarchyRole in Range(0.24,0.25),
    gravityHierarchyExponent in Range(0.45,0.46),
    maxNewLinksNumber in Range(13.5,13.6)
  ) withIndex idpar) x (correplication in (UniformDistribution[Int]() take 40)) withIndex correpid) x(replication in (UniformDistribution[Int]() take 1)) withIndex id
)
val purpose = "TEST_GC"
*/



// output hook
val h = AppendToCSVFileHook(workDirectory / ((new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss")).format(new Date()))+"_"+purpose+".csv")

// env
val local = LocalEnvironment(40)
//val dirac_grid = DIRACEnvironment("vo.complex-systems.eu","https://ccdiracli06.in2p3.fr:9178", group = "complex_user")
//val egi = EGIEnvironment("vo.complex-systems.eu", openMOLEMemory = 2400)


//exploration -< ((densityModelCapsule on egi by 1000) -- (Capsule(densityFileTask) hook copyHook) -- (nwModelCapsule on egi by 1000 hook h)  -- rmPopFile)
exploration -< ((densityModelCapsule on local) -- (Capsule(densityFileTask) hook copyHook) -- (nwModelCapsule on local hook h)  -- rmPopFile)



